{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","slice","length","calculateWinner","setState","concat","step","status","current","winner","moves","map","move","desc","jumpTo","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"8NA2BE,SAASA,EAAOC,GACZ,OACE,wBAAQC,UAAU,SAASC,QAASF,EAAME,QAA1C,SACKF,EAAMG,Q,IAMXC,E,2KAWSC,GAAI,IAAD,OACd,OACA,cAACN,EAAD,CACAI,MAAOG,KAAKN,MAAMO,QAAQF,GAC1BH,QAAS,kBAAM,EAAKF,MAAME,QAAQG,Q,+BAMlC,OACE,gCACE,oBAAIJ,UAAU,KAAd,yCACA,sBAAKA,UAAU,YAAf,UACGK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,MAErB,sBAAKP,UAAU,YAAf,UACGK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,MAErB,sBAAKP,UAAU,YAAf,UACGK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,a,GArCTC,IAAMC,WA6CpBC,E,kDACF,WAAYX,GAAQ,IAAD,8BACf,cAAMA,IACDY,MAAQ,CACTC,QAAS,CAAC,CACNN,QAASO,MAAM,GAAGC,KAAK,QAE3BC,WAAY,EACZC,SAAS,GAPE,E,wDAUPZ,GACV,IAAMQ,EAAUP,KAAKM,MAAMC,QAAQK,MAAM,EAAGZ,KAAKM,MAAMI,WAAa,GAE9DT,EADUM,EAAQA,EAAQM,OAAQ,GAChBZ,QAAQW,QAC5BE,EAAgBb,IAAYA,EAAQF,KAGxCE,EAAQF,GAAKC,KAAKM,MAAMK,QAAU,IAAM,IACxCX,KAAKe,SAAS,CAEVR,QAASA,EAAQS,OAAO,CAAC,CACzBf,QAASA,KAEbS,WAAYH,EAAQM,OAChBF,SAAUX,KAAKM,MAAMK,a,6BAItBM,GACHjB,KAAKe,SAAS,CACVL,WAAYO,EACZN,QAAUM,EAAO,IAAO,M,+BAItB,IAgBFC,EAhBC,OACCX,EAAUP,KAAKM,MAAMC,QACrBY,EAAUZ,EAAQP,KAAKM,MAAMI,YAC7BU,EAASN,EAAgBK,EAAQlB,SAEjCoB,EAAQd,EAAQe,KAAI,SAACL,EAAMM,GAC7B,IAAMC,EAAOD,EACT,eAAiBA,EACjB,mBACA,OACI,6BACI,wBAAQ3B,QAAS,kBAAM,EAAK6B,OAAOF,IAAnC,SAA2CC,KADrCD,MAaxB,OALML,EADAE,EACS,WAAaA,EAEb,iBAAmBpB,KAAKM,MAAMK,QAAU,IAAM,KAI3D,sBAAKhB,UAAU,OAAf,UACE,qBAAKA,UAAU,aAAf,SACE,cAACG,EAAD,CACIG,QAAUkB,EAAQlB,QAClBL,QAAU,SAACG,GAAD,OAAO,EAAK2B,YAAY3B,QAGxC,sBAAKJ,UAAU,YAAf,UACE,qBAAKA,UAAU,SAAf,SAAyBuB,IACzB,6BAAKG,c,GArEIlB,IAAMC,WA4E3B,SAASU,EAAgBb,GAWrB,IAVA,IAAM0B,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEF5B,EAAI,EAAGA,EAAI4B,EAAMd,OAAQd,IAAK,CAAC,IAAD,cACjB4B,EAAM5B,GADW,GAC5B6B,EAD4B,KACzBC,EADyB,KACtBC,EADsB,KAE/B7B,EAAQ2B,IAAM3B,EAAQ2B,KAAO3B,EAAQ4B,KAAM5B,EAAQ2B,GAAO3B,EAAQ6B,IAI1E,OAAO,KAKTC,IAASC,OACP,cAAC3B,EAAD,IACA4B,SAASC,eAAe,W","file":"static/js/main.0124bdda.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n/*square component renders a single button \nclass Square extends React.Component {\n    /*add a constructor to initialize the state. (to remember things components use state) \n    constructor(props) {\n        super(props);\n        this.state = {\n            value: null,\n        };\n    }*/\n    /*then delete the constructor because the square no longer keeps track of the state */\n    /*render() {\n      return (\n        <button\n            className=\"square\"\n            onClick={() => this.props.onClick()}\n        >\n          {this.props.value}\n          {/*this passes value into each square. passed a prop from parent board into the child square component }\n        </button>\n      );\n    }\n  }*/\n\n  function Square(props) {\n      return (\n        <button className=\"square\" onClick={props.onClick}>\n            {props.value}\n        </button>\n      );\n  }\n  \n  /*Board renders the 9 squares */\n  class Board extends React.Component {\n      /*constructor(props) {\n          super(props);\n          this.state = {\n              squares: Array(9).fill(null),\n              xIsNext: true,\n          };\n      }*/\n\n  \n\n    renderSquare(i) {\n      return (\n      <Square\n      value={this.props.squares[i]} \n      onClick={() => this.props.onClick(i)}\n      />\n      );\n    }\n  \n    render() {\n      return (\n        <div> \n          <h1 className=\"bg\">Lets Play Some Tic-Tac-Toe!</h1>\n          <div className=\"board-row\">\n            {this.renderSquare(0)}\n            {this.renderSquare(1)}\n            {this.renderSquare(2)}\n          </div>\n          <div className=\"board-row\">\n            {this.renderSquare(3)}\n            {this.renderSquare(4)}\n            {this.renderSquare(5)}\n          </div>\n          <div className=\"board-row\">\n            {this.renderSquare(6)}\n            {this.renderSquare(7)}\n            {this.renderSquare(8)}\n          </div>\n        </div>\n      );\n    }\n  }\n  \n  /*Game Component renders a board with placeholder values */\n  class Game extends React.Component {\n      constructor(props) {\n          super(props);\n          this.state = {\n              history: [{\n                  squares: Array(9).fill(null),\n              }],\n              stepNumber: 0,\n              xIsNext: true,\n          };\n      }\n      handleClick(i) {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length -1];\n        const squares = current.squares.slice();\n        if (calculateWinner(squares) || squares[i]) {\n            return;\n        }\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        this.setState({\n            /*concat() method doesn't mutate the original array, so it is preferred over the push() */\n            history: history.concat([{\n            squares: squares,\n        }]),\n        stepNumber: history.length,\n            xIsNext: !this.state.xIsNext,\n        });\n    }\n\n    jumpTo(step) {\n        this.setState({\n            stepNumber: step,\n            xIsNext: (step % 2) === 0,\n        });\n    }\n\n    render() {\n        const history = this.state.history;\n        const current = history[this.state.stepNumber];\n        const winner = calculateWinner(current.squares);\n\n        const moves = history.map((step, move) => {\n            const desc = move ?\n                'Go to move #' + move :\n                'Go to game start';\n                return (\n                    <li key= {move}>\n                        <button onClick={() => this.jumpTo(move)}>{desc}</button>\n                    </li>\n                );\n        });\n\n        let status;\n        if (winner) {\n            status = 'Winner: ' + winner;\n        } else {\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n        }\n\n      return (\n        <div className=\"game\">\n          <div className=\"game-board\">\n            <Board\n                squares= {current.squares}\n                onClick= {(i) => this.handleClick(i)}\n            />\n          </div>\n          <div className=\"game-info\">\n            <div className=\"status\">{status}</div>\n            <ol>{moves}</ol>\n          </div>\n        </div>\n      );\n    }\n  }\n  \nfunction calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n\n        }\n    }\n    return null;\n}\n\n  // ========================================\n  \n  ReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n  );\n  "],"sourceRoot":""}